@using System.Text
@model WmObject

@{
    ViewData["Title"] = @Model.Name;
}

<div class="row">
    <canvas id="lineChart"></canvas>
</div>

<script type="text/javascript">
    function convertBase64ToArrayBuffer(base64) {
        let binary_string = window.atob(base64);
        let len = binary_string.length;
        let bytes = new Uint8Array(len);

        for (let i = 0; i < len; i++) {
            bytes[i] = binary_string.charCodeAt(i);
        }

        return bytes;
    }

    function decodeFloat(bytes, signBits, exponentBits, fractionBits, eMin, eMax, littleEndian) {
        let totalBits = (signBits + exponentBits + fractionBits);

        let binary = "";

        for (let i = 0, l = bytes.length; i < l; i++) {
            let bits = bytes[i].toString(2);

            while (bits.length < 8) {
                bits = "0" + bits;
            }

            if (littleEndian) {
                binary = bits + binary;
            } else {
                binary += bits;
            }
        }

        let sign = (binary.charAt(0) == '1') ? -1 : 1;
        let exponent = parseInt(binary.substr(signBits, exponentBits), 2) - eMax;
        let significandBase = binary.substr(signBits + exponentBits, fractionBits);
        let significandBin = '1' + significandBase;
        let i = 0;
        let val = 1;
        let significand = 0;

        if (exponent == -eMax) {
            if (significandBase.indexOf('1') == -1) {
                return 0;
            } else {
                exponent = eMin;
                significandBin = '0' + significandBase;
            }
        }

        while (i < significandBin.length) {
            significand += val * parseInt(significandBin.charAt(i));
            val = val / 2;
            i++;
        }

        return sign * significand * Math.pow(2, exponent);
    }

    let distance = [];
    let humidity = [];
    let temperatureCelsius = [];
    let wmRecordsLabel = [];

    let wmRecords = JSON.parse('@Html.Raw(Json.Serialize(@Model.WmRecords.Select(r => new { r.Data, r.CreatedAt }).ToArray()))');

    for (let i = 0; i < wmRecords.length; i++) {
        let j = 14;

        let byteArr = convertBase64ToArrayBuffer(wmRecords[i].data);
        let numOfValues = byteArr[j++];

        for (let k = 0; k < numOfValues; k++) {
            let valueArr = [];

            switch (byteArr[j]) {
                case 1:
                    j++;

                    for (let l = j; l < j + 8; l++) {
                        valueArr.push(byteArr[l]);
                    }

                    distance.push(decodeFloat(valueArr, 1, 11, 52, -1022, 1023, true));

                    j = j + 8;

                    break;

                case 2:
                    j++;

                    for (let l = j; l < j + 8; l++) {
                        valueArr.push(byteArr[l]);
                    }

                    humidity.push(decodeFloat(valueArr, 1, 11, 52, -1022, 1023, true));

                    j = j + 8;

                    break;

                case 3:
                    j++;

                    for (let l = j; l < j + 8; l++) {
                        valueArr.push(byteArr[l]);
                    }

                    temperatureCelsius.push(decodeFloat(valueArr, 1, 11, 52, -1022, 1023, true));

                    j = j + 8;

                    break;

                default:
                    break;
            }
        }
    }

    for (let i = 0; i < wmRecords.length; i++) {
        wmRecordsLabel.push(wmRecords[i].createdAt)
    }

    /**
     * Line chart.
     */

    let ctxL = document.getElementById("lineChart").getContext('2d');

    let lineChart = new Chart(ctxL, {
        type: 'line',
        data: {
            labels: wmRecordsLabel,
            datasets: [
                {
                    label: "Distance",
                    data: distance,
                    backgroundColor: [
                        'rgba(100, 181, 246, .2)',
                    ],
                    borderColor: [
                        'rgba(30, 136, 229, .7)',
                    ],
                    borderWidth: 2
                },
                {
                    label: "Humidity",
                    data: humidity,
                    backgroundColor: [
                        'rgba(129, 199, 132, .2)',
                    ],
                    borderColor: [
                        'rgba(67, 160, 71, .7)',
                    ],
                    borderWidth: 2
                },
                {
                    label: "Temperature (°C)",
                    data: temperatureCelsius,
                    backgroundColor: [
                        'rgba(229, 115, 115, .2)',
                    ],
                    borderColor: [
                        'rgba(229, 57, 53, .7)',
                    ],
                    borderWidth: 2
                }
            ]
        },
        options: {
            responsive: true
        }
    });
</script>